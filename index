<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Converted from Markdown</title>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
      line-height: 1.6;
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
      color: #333;
    }
    h1, h2, h3 { color: #333; margin-top: 1.5em; margin-bottom: 0.5em; }
    h1 { font-size: 2em; }
    h2 { font-size: 1.5em; }
    h3 { font-size: 1.2em; }
    code {
      background: #f4f4f4;
      padding: 2px 4px;
      border-radius: 3px;
      font-family: 'Courier New', monospace;
    }
    pre {
      background: #f4f4f4;
      padding: 15px;
      border-radius: 5px;
      overflow-x: auto;
      font-family: 'Courier New', monospace;
      line-height: 1.4;
    }
    blockquote {
      border-left: 4px solid #ddd;
      margin: 1em 0;
      padding-left: 20px;
      color: #666;
      font-style: italic;
    }
    table {
      border-collapse: collapse;
      width: 100%;
      margin: 1em 0;
    }
    th, td {
      border: 1px solid #ddd;
      padding: 8px 12px;
      text-align: left;
    }
    th {
      background-color: #f5f5f5;
      font-weight: bold;
    }
    ul, ol {
      margin: 1em 0;
      padding-left: 2em;
    }
    li {
      margin: 0.5em 0;
    }
  </style>
</head>
<body>
<h1>🛒 E-Commerce API - Complete Documentation</h1>
<p><strong>Version:</strong> 2.0.0<br><strong>Last Updated:</strong> October 2025<br><strong>Base URL:</strong> <code>http://localhost:5000/api</code></p>
<hr>
<h2>📑 Table of Contents</h2>
<ol>
<li><a href="#introduction">Introduction</a></li>
<li><a href="#getting-started">Getting Started</a></li>
<li><a href="#architecture-overview">Architecture Overview</a></li>
<li><a href="#installation-guide">Installation Guide</a></li>
<li><a href="#configuration">Configuration</a></li>
<li><a href="#database-schema">Database Schema</a></li>
<li><a href="#api-reference">API Reference</a></li>
<li><a href="#authentication--authorization">Authentication &amp; Authorization</a></li>
<li><a href="#error-handling">Error Handling</a></li>
<li><a href="#testing-guide">Testing Guide</a></li>
<li><a href="#deployment">Deployment</a></li>
<li><a href="#best-practices">Best Practices</a></li>
<li><a href="#troubleshooting">Troubleshooting</a></li>
</ol>
<hr>
<h2>🎯 Introduction</h2>
<h3>Overview</h3>
<p>This is a comprehensive, production-ready e-commerce REST API built with Node.js, Express, and MongoDB. It provides a complete backend solution for online shopping platforms with features including user authentication, product management, shopping cart, order processing, payment integration, and admin panel.</p>
<h3>Key Features</h3>
<ul>
<li>✅ JWT-based authentication &amp; authorization</li>
<li>✅ Role-based access control (User/Admin)</li>
<li>✅ Product catalog with advanced filtering</li>
<li>✅ Shopping cart management</li>
<li>✅ Stripe payment integration</li>
<li>✅ Order processing &amp; tracking</li>
<li>✅ Product reviews &amp; ratings</li>
<li>✅ Real-time inventory management</li>
<li>✅ Admin dashboard with analytics</li>
<li>✅ Security best practices (Helmet, Rate limiting, CORS)</li>
<li>✅ Input validation &amp; error handling</li>
</ul>
<h3>Technology Stack</h3>
<ul>
<li><strong>Runtime:</strong> Node.js v14+</li>
<li><strong>Framework:</strong> Express.js v4.18</li>
<li><strong>Database:</strong> MongoDB v5.0+</li>
<li><strong>ODM:</strong> Mongoose v7.5</li>
<li><strong>Authentication:</strong> JWT (jsonwebtoken)</li>
<li><strong>Payment:</strong> Stripe v14</li>
<li><strong>Security:</strong> Helmet, bcryptjs, express-rate-limit</li>
<li><strong>Validation:</strong> Joi v17</li>
</ul>
<hr>
<h2>🚀 Getting Started</h2>
<h3>Prerequisites</h3>
<p>Before you begin, ensure you have the following installed:</p>
<ul>
<li>Node.js (v14 or higher)</li>
<li>MongoDB (v5.0 or higher)</li>
<li>npm or yarn</li>
<li>Stripe account (for payments)</li>
<li>Postman or similar API testing tool</li>
</ul>
<h3>Quick Start (5 Minutes)</h3>
<pre><code class="language-bash"># 1. Clone the repository
git clone &lt;your-repo-url&gt;
cd ecommerce-api

# 2. Install dependencies
npm install

# 3. Create .env file
cp .env.example .env
# Edit .env with your configurations

# 4. Start MongoDB
mongod

# 5. Seed database (optional)
npm run seed

# 6. Start the server
npm run dev
</code></pre>
<p>Server will be running at <code>http://localhost:5000</code></p>
<hr>
<h2>🏗️ Architecture Overview</h2>
<h3>Project Structure</h3>
<pre><code>ecommerce-api/
│
├── config/                    # Configuration files
│   ├── db.js                 # MongoDB connection
│   └── stripe.js             # Stripe configuration
│
├── controllers/              # Business logic
│   ├── authController.js    # Authentication logic
│   ├── productController.js # Product operations
│   ├── cartController.js    # Cart management
│   ├── orderController.js   # Order processing
│   ├── reviewController.js  # Review management
│   └── adminController.js   # Admin operations
│
├── middleware/              # Custom middleware
│   ├── authMiddleware.js   # JWT verification
│   ├── adminMiddleware.js  # Admin authorization
│   ├── errorMiddleware.js  # Error handling
│   └── validationMiddleware.js # Input validation
│
├── models/                  # Database models
│   ├── User.js             # User schema
│   ├── Product.js          # Product schema
│   ├── Cart.js             # Cart schema
│   ├── Order.js            # Order schema
│   └── Review.js           # Review schema
│
├── routes/                  # API routes
│   ├── authRoutes.js       # /api/auth
│   ├── productRoutes.js    # /api/products
│   ├── cartRoutes.js       # /api/cart
│   ├── orderRoutes.js      # /api/orders
│   ├── reviewRoutes.js     # /api/reviews
│   └── adminRoutes.js      # /api/admin
│
├── utils/                   # Utility functions
│   ├── validators.js       # Custom validators
│   ├── helpers.js          # Helper functions
│   └── seed.js             # Database seeder
│
├── .env                     # Environment variables
├── .gitignore              # Git ignore rules
├── package.json            # Dependencies
└── server.js               # Application entry point
</code></pre>
<h3>Application Flow</h3>
<pre><code>Client Request
    ↓
Express Server (server.js)
    ↓
Security Middleware (Helmet, CORS, Rate Limit)
    ↓
Body Parser
    ↓
Route Handler (routes/)
    ↓
Authentication Middleware (if protected)
    ↓
Validation Middleware
    ↓
Controller (business logic)
    ↓
Database Operations (models/)
    ↓
Response Formation
    ↓
Client Response
</code></pre>
<hr>
<h2>💻 Installation Guide</h2>
<h3>Step 1: System Requirements</h3>
<pre><code class="language-bash"># Check Node.js version
node --version  # Should be v14+

# Check npm version
npm --version

# Check MongoDB
mongo --version  # Should be v5.0+
</code></pre>
<h3>Step 2: Project Setup</h3>
<pre><code class="language-bash"># Create project directory
mkdir ecommerce-api
cd ecommerce-api

# Initialize npm project
npm init -y

# Install dependencies
npm install express mongoose dotenv jsonwebtoken bcryptjs stripe cors helmet morgan express-rate-limit joi

# Install dev dependencies
npm install --save-dev nodemon
</code></pre>
<h3>Step 3: File Creation</h3>
<p>Create all files as per the project structure provided in the artifact.</p>
<h3>Step 4: Environment Configuration</h3>
<p>Create <code>.env</code> file:</p>
<pre><code class="language-env"># Server Configuration
NODE_ENV=development
PORT=5000

# Database
MONGO_URI=mongodb://localhost:27017/ecommerce

# JWT Configuration
JWT_SECRET=your_super_secret_jwt_key_min_32_characters_long
JWT_EXPIRE=7d

# Stripe Configuration
STRIPE_SECRET_KEY=sk_test_51xxxxx
STRIPE_WEBHOOK_SECRET=whsec_xxxxx

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# CORS (optional)
CLIENT_URL=http://localhost:3000
</code></pre>
<h3>Step 5: MongoDB Setup</h3>
<p><strong>Option A: Local MongoDB</strong></p>
<pre><code class="language-bash"># Start MongoDB service
sudo systemctl start mongod

# Or on macOS
brew services start mongodb-community
</code></pre>
<p><strong>Option B: MongoDB Atlas (Cloud)</strong></p>
<ol>
<li>Create account at <a href="https://www.mongodb.com/cloud/atlas">https://www.mongodb.com/cloud/atlas</a></li>
<li>Create cluster</li>
<li>Get connection string</li>
<li>Update MONGO_URI in .env</li>
</ol>
<p><strong>Option C: Docker</strong></p>
<pre><code class="language-bash">docker run -d \
  --name mongodb \
  -p 27017:27017 \
  -e MONGO_INITDB_ROOT_USERNAME=admin \
  -e MONGO_INITDB_ROOT_PASSWORD=password \
  mongo:latest
</code></pre>
<h3>Step 6: Stripe Setup</h3>
<ol>
<li>Create Stripe account at <a href="https://stripe.com">https://stripe.com</a></li>
<li>Get API keys from Dashboard</li>
<li>Add to .env file</li>
<li>For testing, use Stripe test cards:<ul>
<li>Success: <code>4242 4242 4242 4242</code></li>
<li>Decline: <code>4000 0000 0000 0002</code></li>
</ul>
</li>
</ol>
<hr>
<h2>⚙️ Configuration</h2>
<h3>Environment Variables Explained</h3>
<table>
<thead>
<tr>
<th>Variable</th>
<th>Description</th>
<th>Example</th>
<th>Required</th>
</tr>
</thead>
<tbody><tr>
<td><code>NODE_ENV</code></td>
<td>Environment mode</td>
<td><code>development</code> / <code>production</code></td>
<td>Yes</td>
</tr>
<tr>
<td><code>PORT</code></td>
<td>Server port</td>
<td><code>5000</code></td>
<td>Yes</td>
</tr>
<tr>
<td><code>MONGO_URI</code></td>
<td>MongoDB connection string</td>
<td><code>mongodb://localhost:27017/ecommerce</code></td>
<td>Yes</td>
</tr>
<tr>
<td><code>JWT_SECRET</code></td>
<td>Secret key for JWT</td>
<td>Min 32 characters</td>
<td>Yes</td>
</tr>
<tr>
<td><code>JWT_EXPIRE</code></td>
<td>Token expiration</td>
<td><code>7d</code>, <code>24h</code>, <code>30m</code></td>
<td>Yes</td>
</tr>
<tr>
<td><code>STRIPE_SECRET_KEY</code></td>
<td>Stripe secret key</td>
<td><code>sk_test_xxx</code></td>
<td>Yes</td>
</tr>
<tr>
<td><code>STRIPE_WEBHOOK_SECRET</code></td>
<td>Stripe webhook secret</td>
<td><code>whsec_xxx</code></td>
<td>Optional</td>
</tr>
<tr>
<td><code>RATE_LIMIT_WINDOW_MS</code></td>
<td>Rate limit window (ms)</td>
<td><code>900000</code> (15 min)</td>
<td>Optional</td>
</tr>
<tr>
<td><code>RATE_LIMIT_MAX_REQUESTS</code></td>
<td>Max requests per window</td>
<td><code>100</code></td>
<td>Optional</td>
</tr>
<tr>
<td><code>CLIENT_URL</code></td>
<td>Frontend URL for CORS</td>
<td><code>http://localhost:3000</code></td>
<td>Optional</td>
</tr>
</tbody></table>
<h3>Security Configuration</h3>
<p><strong>Helmet Configuration (server.js):</strong></p>
<pre><code class="language-javascript">app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: [&quot;&#39;self&#39;&quot;],
      styleSrc: [&quot;&#39;self&#39;&quot;, &quot;&#39;unsafe-inline&#39;&quot;]
    }
  }
}));
</code></pre>
<p><strong>CORS Configuration:</strong></p>
<pre><code class="language-javascript">const corsOptions = {
  origin: process.env.CLIENT_URL || &#39;*&#39;,
  credentials: true,
  optionSuccessStatus: 200
};
app.use(cors(corsOptions));
</code></pre>
<p><strong>Rate Limiting:</strong></p>
<pre><code class="language-javascript">const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  message: &#39;Too many requests from this IP&#39;
});
</code></pre>
<hr>
<h2>🗄️ Database Schema</h2>
<h3>User Model</h3>
<pre><code class="language-javascript">{
  name: String,           // Required, max 50 chars
  email: String,          // Required, unique, validated
  password: String,       // Required, hashed, min 6 chars
  role: String,           // &#39;user&#39; or &#39;admin&#39;, default: &#39;user&#39;
  address: {
    street: String,
    city: String,
    state: String,
    zipCode: String,
    country: String
  },
  phone: String,
  resetPasswordToken: String,
  resetPasswordExpire: Date,
  createdAt: Date,        // Auto-generated
  updatedAt: Date         // Auto-generated
}
</code></pre>
<p><strong>Indexes:</strong></p>
<ul>
<li><code>email</code> (unique)</li>
</ul>
<p><strong>Methods:</strong></p>
<ul>
<li><code>matchPassword(enteredPassword)</code> - Compares passwords</li>
</ul>
<h3>Product Model</h3>
<pre><code class="language-javascript">{
  name: String,           // Required, max 100 chars
  description: String,    // Required, max 2000 chars
  price: Number,          // Required, min 0
  category: String,       // Required, enum values
  stock: Number,          // Required, min 0, default 0
  images: [String],       // Array of image URLs
  rating: Number,         // 0-5, default 0
  numReviews: Number,     // Default 0
  featured: Boolean,      // Default false
  brand: String,
  sku: String,
  createdAt: Date,
  updatedAt: Date
}
</code></pre>
<p><strong>Categories:</strong></p>
<ul>
<li>Electronics</li>
<li>Clothing</li>
<li>Books</li>
<li>Home</li>
<li>Sports</li>
<li>Other</li>
</ul>
<p><strong>Indexes:</strong></p>
<ul>
<li>Text index on <code>name</code> and <code>description</code> for search</li>
</ul>
<p><strong>Virtuals:</strong></p>
<ul>
<li><code>reviews</code> - Populated reviews for the product</li>
</ul>
<h3>Cart Model</h3>
<pre><code class="language-javascript">{
  user: ObjectId,         // Required, unique, ref: &#39;User&#39;
  items: [
    {
      product: ObjectId,  // Required, ref: &#39;Product&#39;
      quantity: Number    // Required, min 1, default 1
    }
  ],
  totalAmount: Number,    // Default 0, calculated
  createdAt: Date,
  updatedAt: Date
}
</code></pre>
<p><strong>Methods:</strong></p>
<ul>
<li><code>calculateTotal()</code> - Calculates and updates total amount</li>
</ul>
<h3>Order Model</h3>
<pre><code class="language-javascript">{
  user: ObjectId,         // Required, ref: &#39;User&#39;
  items: [
    {
      product: ObjectId,  // Required, ref: &#39;Product&#39;
      name: String,       // Product snapshot
      quantity: Number,   // Required, min 1
      price: Number       // Required, snapshot
    }
  ],
  shippingAddress: {
    street: String,       // Required
    city: String,         // Required
    state: String,        // Required
    zipCode: String,      // Required
    country: String       // Required
  },
  paymentMethod: String,  // Required, default &#39;stripe&#39;
  paymentResult: {
    id: String,           // Payment intent ID
    status: String,       // Payment status
    update_time: String,
    email_address: String
  },
  itemsPrice: Number,     // Required, default 0
  taxPrice: Number,       // Required, default 0
  shippingPrice: Number,  // Required, default 0
  totalPrice: Number,     // Required, default 0
  isPaid: Boolean,        // Default false
  paidAt: Date,
  isDelivered: Boolean,   // Default false
  deliveredAt: Date,
  status: String,         // Enum, default &#39;Pending&#39;
  createdAt: Date,
  updatedAt: Date
}
</code></pre>
<p><strong>Status Values:</strong></p>
<ul>
<li>Pending</li>
<li>Processing</li>
<li>Shipped</li>
<li>Delivered</li>
<li>Cancelled</li>
</ul>
<h3>Review Model</h3>
<pre><code class="language-javascript">{
  product: ObjectId,      // Required, ref: &#39;Product&#39;
  user: ObjectId,         // Required, ref: &#39;User&#39;
  rating: Number,         // Required, 1-5
  comment: String,        // Required, max 500 chars
  createdAt: Date,
  updatedAt: Date
}
</code></pre>
<p><strong>Indexes:</strong></p>
<ul>
<li>Compound unique index on <code>product</code> and <code>user</code></li>
</ul>
<p><strong>Static Methods:</strong></p>
<ul>
<li><code>calculateAverageRating(productId)</code> - Updates product rating</li>
</ul>
<hr>
<h2>📚 API Reference</h2>
<h3>Response Format</h3>
<p>All API responses follow this structure:</p>
<p><strong>Success Response:</strong></p>
<pre><code class="language-json">{
  &quot;success&quot;: true,
  &quot;data&quot;: { ... },
  &quot;count&quot;: 10,      // For list endpoints
  &quot;page&quot;: 1,        // For paginated endpoints
  &quot;pages&quot;: 5        // For paginated endpoints
}
</code></pre>
<p><strong>Error Response:</strong></p>
<pre><code class="language-json">{
  &quot;success&quot;: false,
  &quot;message&quot;: &quot;Error description&quot;
}
</code></pre>
<hr>
<h2>🔐 Authentication &amp; Authorization</h2>
<h3>1. User Registration</h3>
<p><strong>Endpoint:</strong> <code>POST /api/auth/register</code></p>
<p><strong>Description:</strong> Register a new user account</p>
<p><strong>Request Body:</strong></p>
<pre><code class="language-json">{
  &quot;name&quot;: &quot;John Doe&quot;,
  &quot;email&quot;: &quot;john@example.com&quot;,
  &quot;password&quot;: &quot;password123&quot;
}
</code></pre>
<p><strong>Validation Rules:</strong></p>
<ul>
<li><code>name</code>: Required, 2-50 characters</li>
<li><code>email</code>: Required, valid email format, unique</li>
<li><code>password</code>: Required, minimum 6 characters</li>
</ul>
<p><strong>Success Response (201):</strong></p>
<pre><code class="language-json">{
  &quot;success&quot;: true,
  &quot;data&quot;: {
    &quot;_id&quot;: &quot;614c1b5e9f1b2c001f123456&quot;,
    &quot;name&quot;: &quot;John Doe&quot;,
    &quot;email&quot;: &quot;john@example.com&quot;,
    &quot;role&quot;: &quot;user&quot;,
    &quot;token&quot;: &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...&quot;
  }
}
</code></pre>
<p><strong>Error Responses:</strong></p>
<ul>
<li><code>400</code> - Validation error or user already exists</li>
<li><code>500</code> - Server error</li>
</ul>
<p><strong>Example cURL:</strong></p>
<pre><code class="language-bash">curl -X POST http://localhost:5000/api/auth/register \
  -H &quot;Content-Type: application/json&quot; \
  -d &#39;{
    &quot;name&quot;: &quot;John Doe&quot;,
    &quot;email&quot;: &quot;john@example.com&quot;,
    &quot;password&quot;: &quot;password123&quot;
  }&#39;
</code></pre>
<hr>
<h3>2. User Login</h3>
<p><strong>Endpoint:</strong> <code>POST /api/auth/login</code></p>
<p><strong>Description:</strong> Authenticate user and receive JWT token</p>
<p><strong>Request Body:</strong></p>
<pre><code class="language-json">{
  &quot;email&quot;: &quot;john@example.com&quot;,
  &quot;password&quot;: &quot;password123&quot;
}
</code></pre>
<p><strong>Success Response (200):</strong></p>
<pre><code class="language-json">{
  &quot;success&quot;: true,
  &quot;data&quot;: {
    &quot;_id&quot;: &quot;614c1b5e9f1b2c001f123456&quot;,
    &quot;name&quot;: &quot;John Doe&quot;,
    &quot;email&quot;: &quot;john@example.com&quot;,
    &quot;role&quot;: &quot;user&quot;,
    &quot;token&quot;: &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...&quot;
  }
}
</code></pre>
<p><strong>Error Responses:</strong></p>
<ul>
<li><code>400</code> - Missing email or password</li>
<li><code>401</code> - Invalid credentials</li>
<li><code>500</code> - Server error</li>
</ul>
<p><strong>Token Usage:</strong>
Store the token and include it in subsequent requests:</p>
<pre><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
</code></pre>
<hr>
<h3>3. Get User Profile</h3>
<p><strong>Endpoint:</strong> <code>GET /api/auth/profile</code></p>
<p><strong>Authentication:</strong> Required (Bearer Token)</p>
<p><strong>Description:</strong> Get logged-in user&#39;s profile information</p>
<p><strong>Headers:</strong></p>
<pre><code>Authorization: Bearer &lt;your_token&gt;
</code></pre>
<p><strong>Success Response (200):</strong></p>
<pre><code class="language-json">{
  &quot;success&quot;: true,
  &quot;data&quot;: {
    &quot;_id&quot;: &quot;614c1b5e9f1b2c001f123456&quot;,
    &quot;name&quot;: &quot;John Doe&quot;,
    &quot;email&quot;: &quot;john@example.com&quot;,
    &quot;role&quot;: &quot;user&quot;,
    &quot;address&quot;: {
      &quot;street&quot;: &quot;123 Main St&quot;,
      &quot;city&quot;: &quot;New York&quot;,
      &quot;state&quot;: &quot;NY&quot;,
      &quot;zipCode&quot;: &quot;10001&quot;,
      &quot;country&quot;: &quot;USA&quot;
    },
    &quot;phone&quot;: &quot;+1234567890&quot;,
    &quot;createdAt&quot;: &quot;2024-01-15T10:30:00.000Z&quot;,
    &quot;updatedAt&quot;: &quot;2024-01-20T14:22:00.000Z&quot;
  }
}
</code></pre>
<p><strong>Error Responses:</strong></p>
<ul>
<li><code>401</code> - No token provided or invalid token</li>
<li><code>404</code> - User not found</li>
<li><code>500</code> - Server error</li>
</ul>
<hr>
<h3>4. Update User Profile</h3>
<p><strong>Endpoint:</strong> <code>PUT /api/auth/profile</code></p>
<p><strong>Authentication:</strong> Required</p>
<p><strong>Description:</strong> Update user profile information</p>
<p><strong>Request Body:</strong></p>
<pre><code class="language-json">{
  &quot;name&quot;: &quot;John Updated&quot;,
  &quot;email&quot;: &quot;johnupdated@example.com&quot;,
  &quot;phone&quot;: &quot;+1234567890&quot;,
  &quot;address&quot;: {
    &quot;street&quot;: &quot;456 Oak Avenue&quot;,
    &quot;city&quot;: &quot;Los Angeles&quot;,
    &quot;state&quot;: &quot;CA&quot;,
    &quot;zipCode&quot;: &quot;90001&quot;,
    &quot;country&quot;: &quot;USA&quot;
  }
}
</code></pre>
<p><strong>Success Response (200):</strong></p>
<pre><code class="language-json">{
  &quot;success&quot;: true,
  &quot;data&quot;: {
    &quot;_id&quot;: &quot;614c1b5e9f1b2c001f123456&quot;,
    &quot;name&quot;: &quot;John Updated&quot;,
    &quot;email&quot;: &quot;johnupdated@example.com&quot;,
    &quot;phone&quot;: &quot;+1234567890&quot;,
    &quot;address&quot;: {
      &quot;street&quot;: &quot;456 Oak Avenue&quot;,
      &quot;city&quot;: &quot;Los Angeles&quot;,
      &quot;state&quot;: &quot;CA&quot;,
      &quot;zipCode&quot;: &quot;90001&quot;,
      &quot;country&quot;: &quot;USA&quot;
    }
  }
}
</code></pre>
<hr>
<h2>🛍️ Product Management</h2>
<h3>5. Get All Products</h3>
<p><strong>Endpoint:</strong> <code>GET /api/products</code></p>
<p><strong>Authentication:</strong> Not Required</p>
<p><strong>Description:</strong> Get paginated list of products with filtering and search</p>
<p><strong>Query Parameters:</strong></p>
<table>
<thead>
<tr>
<th>Parameter</th>
<th>Type</th>
<th>Description</th>
<th>Example</th>
</tr>
</thead>
<tbody><tr>
<td><code>page</code></td>
<td>Number</td>
<td>Page number (default: 1)</td>
<td><code>?page=2</code></td>
</tr>
<tr>
<td><code>limit</code></td>
<td>Number</td>
<td>Items per page (default: 10)</td>
<td><code>?limit=20</code></td>
</tr>
<tr>
<td><code>category</code></td>
<td>String</td>
<td>Filter by category</td>
<td><code>?category=Electronics</code></td>
</tr>
<tr>
<td><code>search</code></td>
<td>String</td>
<td>Search in name/description</td>
<td><code>?search=wireless</code></td>
</tr>
<tr>
<td><code>minPrice</code></td>
<td>Number</td>
<td>Minimum price filter</td>
<td><code>?minPrice=50</code></td>
</tr>
<tr>
<td><code>maxPrice</code></td>
<td>Number</td>
<td>Maximum price filter</td>
<td><code>?maxPrice=500</code></td>
</tr>
</tbody></table>
<p><strong>Example Request:</strong></p>
<pre><code>GET /api/products?page=1&amp;limit=10&amp;category=Electronics&amp;minPrice=100&amp;maxPrice=500
</code></pre>
<p><strong>Success Response (200):</strong></p>
<pre><code class="language-json">{
  &quot;success&quot;: true,
  &quot;count&quot;: 10,
  &quot;total&quot;: 45,
  &quot;page&quot;: 1,
  &quot;pages&quot;: 5,
  &quot;data&quot;: [
    {
      &quot;_id&quot;: &quot;614c1b5e9f1b2c001f654321&quot;,
      &quot;name&quot;: &quot;Wireless Headphones&quot;,
      &quot;description&quot;: &quot;High-quality wireless headphones...&quot;,
      &quot;price&quot;: 199.99,
      &quot;category&quot;: &quot;Electronics&quot;,
      &quot;stock&quot;: 50,
      &quot;images&quot;: [&quot;https://example.com/image1.jpg&quot;],
      &quot;rating&quot;: 4.5,
      &quot;numReviews&quot;: 23,
      &quot;featured&quot;: true,
      &quot;brand&quot;: &quot;AudioTech&quot;,
      &quot;createdAt&quot;: &quot;2024-01-10T08:00:00.000Z&quot;,
      &quot;updatedAt&quot;: &quot;2024-01-20T10:30:00.000Z&quot;
    }
    // ... more products
  ]
}
</code></pre>
<p><strong>Filter Combinations:</strong></p>
<pre><code class="language-bash"># Electronics under $300
GET /api/products?category=Electronics&amp;maxPrice=300

# Search for &quot;shoes&quot; in Sports category
GET /api/products?category=Sports&amp;search=shoes

# Page 2 with 20 items
GET /api/products?page=2&amp;limit=20
</code></pre>
<hr>
<h3>6. Get Single Product</h3>
<p><strong>Endpoint:</strong> <code>GET /api/products/:id</code></p>
<p><strong>Authentication:</strong> Not Required</p>
<p><strong>Description:</strong> Get detailed information about a specific product including reviews</p>
<p><strong>URL Parameters:</strong></p>
<ul>
<li><code>id</code> - Product ID (MongoDB ObjectId)</li>
</ul>
<p><strong>Success Response (200):</strong></p>
<pre><code class="language-json">{
  &quot;success&quot;: true,
  &quot;data&quot;: {
    &quot;_id&quot;: &quot;614c1b5e9f1b2c001f654321&quot;,
    &quot;name&quot;: &quot;Wireless Headphones&quot;,
    &quot;description&quot;: &quot;High-quality wireless headphones with active noise cancellation...&quot;,
    &quot;price&quot;: 199.99,
    &quot;category&quot;: &quot;Electronics&quot;,
    &quot;stock&quot;: 50,
    &quot;images&quot;: [
      &quot;https://example.com/image1.jpg&quot;,
      &quot;https://example.com/image2.jpg&quot;
    ],
    &quot;rating&quot;: 4.5,
    &quot;numReviews&quot;: 23,
    &quot;featured&quot;: true,
    &quot;brand&quot;: &quot;AudioTech&quot;,
    &quot;sku&quot;: &quot;AUD-WH-001&quot;,
    &quot;reviews&quot;: [
      {
        &quot;_id&quot;: &quot;614c1b5e9f1b2c001f789012&quot;,
        &quot;user&quot;: {
          &quot;_id&quot;: &quot;614c1b5e9f1b2c001f123456&quot;,
          &quot;name&quot;: &quot;John Doe&quot;
        },
        &quot;rating&quot;: 5,
        &quot;comment&quot;: &quot;Excellent sound quality!&quot;,
        &quot;createdAt&quot;: &quot;2024-01-15T14:30:00.000Z&quot;
      }
    ],
    &quot;createdAt&quot;: &quot;2024-01-10T08:00:00.000Z&quot;,
    &quot;updatedAt&quot;: &quot;2024-01-20T10:30:00.000Z&quot;
  }
}
</code></pre>
<p><strong>Error Responses:</strong></p>
<ul>
<li><code>404</code> - Product not found</li>
<li><code>500</code> - Server error</li>
</ul>
<hr>
<h3>7. Get Featured Products</h3>
<p><strong>Endpoint:</strong> <code>GET /api/products/featured</code></p>
<p><strong>Authentication:</strong> Not Required</p>
<p><strong>Description:</strong> Get up to 6 featured products for homepage display</p>
<p><strong>Success Response (200):</strong></p>
<pre><code class="language-json">{
  &quot;success&quot;: true,
  &quot;count&quot;: 6,
  &quot;data&quot;: [
    {
      &quot;_id&quot;: &quot;614c1b5e9f1b2c001f654321&quot;,
      &quot;name&quot;: &quot;Wireless Headphones&quot;,
      &quot;price&quot;: 199.99,
      &quot;images&quot;: [&quot;https://example.com/image1.jpg&quot;],
      &quot;rating&quot;: 4.5,
      &quot;category&quot;: &quot;Electronics&quot;
    }
    // ... up to 6 products
  ]
}
</code></pre>
<hr>
<h2>🛒 Shopping Cart</h2>
<h3>8. Get User Cart</h3>
<p><strong>Endpoint:</strong> <code>GET /api/cart</code></p>
<p><strong>Authentication:</strong> Required</p>
<p><strong>Description:</strong> Get current user&#39;s shopping cart with all items</p>
<p><strong>Success Response (200):</strong></p>
<pre><code class="language-json">{
  &quot;success&quot;: true,
  &quot;data&quot;: {
    &quot;_id&quot;: &quot;614c1b5e9f1b2c001f999999&quot;,
    &quot;user&quot;: &quot;614c1b5e9f1b2c001f123456&quot;,
    &quot;items&quot;: [
      {
        &quot;_id&quot;: &quot;614c1b5e9f1b2c001f888888&quot;,
        &quot;product&quot;: {
          &quot;_id&quot;: &quot;614c1b5e9f1b2c001f654321&quot;,
          &quot;name&quot;: &quot;Wireless Headphones&quot;,
          &quot;price&quot;: 199.99,
          &quot;images&quot;: [&quot;https://example.com/image1.jpg&quot;],
          &quot;stock&quot;: 50
        },
        &quot;quantity&quot;: 2
      },
      {
        &quot;_id&quot;: &quot;614c1b5e9f1b2c001f777777&quot;,
        &quot;product&quot;: {
          &quot;_id&quot;: &quot;614c1b5e9f1b2c001f654322&quot;,
          &quot;name&quot;: &quot;Smart Watch&quot;,
          &quot;price&quot;: 299.99,
          &quot;images&quot;: [&quot;https://example.com/watch.jpg&quot;],
          &quot;stock&quot;: 30
        },
        &quot;quantity&quot;: 1
      }
    ],
    &quot;totalAmount&quot;: 699.97,
    &quot;createdAt&quot;: &quot;2024-01-20T10:00:00.000Z&quot;,
    &quot;updatedAt&quot;: &quot;2024-01-20T14:30:00.000Z&quot;
  }
}
</code></pre>
<p><strong>Note:</strong> If user has no cart, an empty cart is automatically created.</p>
<hr>
<h3>9. Add to Cart</h3>
<p><strong>Endpoint:</strong> <code>POST /api/cart</code></p>
<p><strong>Authentication:</strong> Required</p>
<p><strong>Description:</strong> Add a product to the shopping cart or increase quantity if already exists</p>
<p><strong>Request Body:</strong></p>
<pre><code class="language-json">{
  &quot;productId&quot;: &quot;614c1b5e9f1b2c001f654321&quot;,
  &quot;quantity&quot;: 2
}
</code></pre>
<p><strong>Success Response (200):</strong></p>
<pre><code class="language-json">{
  &quot;success&quot;: true,
  &quot;data&quot;: {
    &quot;_id&quot;: &quot;614c1b5e9f1b2c001f999999&quot;,
    &quot;user&quot;: &quot;614c1b5e9f1b2c001f123456&quot;,
    &quot;items&quot;: [
      {
        &quot;product&quot;: {
          &quot;_id&quot;: &quot;614c1b5e9f1b2c001f654321&quot;,
          &quot;name&quot;: &quot;Wireless Headphones&quot;,
          &quot;price&quot;: 199.99
        },
        &quot;quantity&quot;: 2
      }
    ],
    &quot;totalAmount&quot;: 399.98
  }
}
</code></pre>
<p><strong>Error Responses:</strong></p>
<ul>
<li><code>400</code> - Insufficient stock</li>
<li><code>404</code> - Product not found</li>
<li><code>401</code> - Unauthorized</li>
</ul>
<p><strong>Business Logic:</strong></p>
<ul>
<li>If product already in cart → quantity is increased</li>
<li>If product not in cart → new item is added</li>
<li>Stock availability is checked before adding</li>
<li>Total amount is recalculated automatically</li>
</ul>
<hr>
<h3>10. Update Cart Item</h3>
<p><strong>Endpoint:</strong> <code>PUT /api/cart/:productId</code></p>
<p><strong>Authentication:</strong> Required</p>
<p><strong>Description:</strong> Update quantity of a specific item in cart</p>
<p><strong>URL Parameters:</strong></p>
<ul>
<li><code>productId</code> - Product ID to update</li>
</ul>
<p><strong>Request Body:</strong></p>
<pre><code class="language-json">{
  &quot;quantity&quot;: 5
}
</code></pre>
<p><strong>Success Response (200):</strong></p>
<pre><code class="language-json">{
  &quot;success&quot;: true,
  &quot;data&quot;: {
    &quot;_id&quot;: &quot;614c1b5e9f1b2c001f999999&quot;,
    &quot;items&quot;: [
      {
        &quot;product&quot;: {
          &quot;_id&quot;: &quot;614c1b5e9f1b2c001f654321&quot;,
          &quot;name&quot;: &quot;Wireless Headphones&quot;,
          &quot;price&quot;: 199.99
        },
        &quot;quantity&quot;: 5
      }
    ],
    &quot;totalAmount&quot;: 999.95
  }
}
</code></pre>
<p><strong>Special Cases:</strong></p>
<ul>
<li>If <code>quantity &lt;= 0</code> → Item is removed from cart</li>
<li>If item not in cart → 404 error</li>
</ul>
<p><strong>Error Responses:</strong></p>
<ul>
<li><code>404</code> - Cart or item not found</li>
<li><code>401</code> - Unauthorized</li>
</ul>
<hr>
<h3>11. Remove from Cart</h3>
<p><strong>Endpoint:</strong> <code>DELETE /api/cart/:productId</code></p>
<p><strong>Authentication:</strong> Required</p>
<p><strong>Description:</strong> Remove a specific product from the cart</p>
<p><strong>URL Parameters:</strong></p>
<ul>
<li><code>productId</code> - Product ID to remove</li>
</ul>
<p><strong>Success Response (200):</strong></p>
<pre><code class="language-json">{
  &quot;success&quot;: true,
  &quot;data&quot;: {
    &quot;_id&quot;: &quot;614c1b5e9f1b2c001f999999&quot;,
    &quot;items&quot;: [
      // remaining items
    ],
    &quot;totalAmount&quot;: 299.99
  }
}
</code></pre>
<hr>
<h3>12. Clear Cart</h3>
<p><strong>Endpoint:</strong> <code>DELETE /api/cart</code></p>
<p><strong>Authentication:</strong> Required</p>
<p><strong>Description:</strong> Remove all items from the cart</p>
<p><strong>Success Response (200):</strong></p>
<pre><code class="language-json">{
  &quot;success&quot;: true,
  &quot;data&quot;: {
    &quot;_id&quot;: &quot;614c1b5e9f1b2c001f999999&quot;,
    &quot;user&quot;: &quot;614c1b5e9f1b2c001f123456&quot;,
    &quot;items&quot;: [],
    &quot;totalAmount&quot;: 0
  }
}
</code></pre>
<hr>
<h2>📦 Order Management</h2>
<h3>13. Create Order</h3>
<p><strong>Endpoint:</strong> <code>POST /api/orders</code></p>
<p><strong>Authentication:</strong> Required</p>
<p><strong>Description:</strong> Create a new order from cart items with payment processing</p>
<p><strong>Request Body:</strong></p>
<pre><code class="language-json">{
  &quot;shippingAddress&quot;: {
    &quot;street&quot;: &quot;123 Main Street&quot;,
    &quot;city&quot;: &quot;New York&quot;,
    &quot;state&quot;: &quot;NY&quot;,
    &quot;zipCode&quot;: &quot;10001&quot;,
    &quot;country&quot;: &quot;USA&quot;
  },
  &quot;paymentMethodId&quot;: &quot;pm_card_visa&quot;
}
</code></pre>
<p><strong>Payment Method IDs (Stripe Test Cards):</strong></p>
<ul>
<li><code>pm_card_visa</code> - Successful payment</li>
<li><code>pm_card_visa_debit</code> - Debit card</li>
<li>Test card number: <code>4242 4242 4242 4242</code></li>
</ul>
<p><strong>Success Response (201):</strong></p>
<pre><code class="language-json">{
  &quot;success&quot;: true,
  &quot;data&quot;: {
    &quot;_id&quot;: &quot;614c1b5e9f1b2c001f111111&quot;,
    &quot;user&quot;: &quot;614c1b5e9f1b2c001f123456&quot;,
    &quot;items&quot;: [
      {
        &quot;product&quot;: &quot;614c1b5e9f1b2c001f654321&quot;,
        &quot;name&quot;: &quot;Wireless Headphones&quot;,
        &quot;quantity&quot;: 2,
        &quot;price&quot;: 199.99
      }
    ],
    &quot;shippingAddress&quot;: {
      &quot;street&quot;: &quot;123 Main Street&quot;,
      &quot;city&quot;: &quot;New York&quot;,
      &quot;state&quot;: &quot;NY&quot;,
      &quot;zipCode&quot;: &quot;10001&quot;,
      &quot;country&quot;: &quot;USA&quot;
    },
    &quot;paymentMethod&quot;: &quot;stripe&quot;,
    &quot;paymentResult&quot;: {
      &quot;id&quot;: &quot;pi_1234567890&quot;,
      &quot;status&quot;: &quot;succeeded&quot;,
      &quot;update_time&quot;: &quot;2024-01-20T15:30:00.000Z&quot;
    },
    &quot;itemsPrice&quot;: 399.98,
    &quot;taxPrice&quot;: 39.99,
    &quot;shippingPrice&quot;: 0,
    &quot;totalPrice&quot;: 439.97,
    &quot;isPaid&quot;: true,
    &quot;paidAt&quot;: &quot;2024-01-20T15:30:00.000Z&quot;,
    &quot;status&quot;: &quot;Processing&quot;,
    &quot;createdAt&quot;: &quot;2024-01-20T15:30:00.000Z&quot;
  }
}
</code></pre>
<p><strong>Order Process:</strong></p>
<ol>
<li>Validates cart has items</li>
<li>Checks product stock availability</li>
<li>Calculates prices (items + tax + shipping)</li>
<li>Processes Stripe payment</li>
<li>Creates order in database</li>
<li>Updates product stock (decreases)</li>
<li>Clears user&#39;s cart</li>
<li>Returns order confirmation</li>
</ol>
<p><strong>Pricing Logic:</strong></p>
<ul>
<li><code>itemsPrice</code> = Sum of (price × quantity) for all items</li>
<li><code>taxPrice</code> = itemsPrice × 0.10 (10% tax)</li>
<li><code>shippingPrice</code> = $10 (free if itemsPrice &gt; $100)</li>
<li><code>totalPrice</code> = itemsPrice + taxPrice + shippingPrice</li>
</ul>
<p><strong>Error Responses:</strong></p>
<ul>
<li><code>400</code> - Cart empty, insufficient stock, or payment failed</li>
<li><code>401</code> - Unauthorized</li>
<li><code>500</code> - Server error</li>
</ul>
<hr>
<h3>14. Get My Orders</h3>
<p><strong>Endpoint:</strong> <code>GET /api/orders</code></p>
<p><strong>Authentication:</strong> Required</p>
<p><strong>Description:</strong> Get all orders for the logged-in user</p>
<p><strong>Success Response (200):</strong></p>
<pre><code class="language-json">{
  &quot;success&quot;: true,
  &quot;count&quot;: 3,
  &quot;data&quot;: [
    {
      &quot;_id&quot;: &quot;614c1b5e9f1b2c001f111111&quot;,
      &quot;items&quot;: [
        {
          &quot;product&quot;: {
            &quot;_id&quot;: &quot;614c1b5e9f1b2c001f654321&quot;,
            &quot;name&quot;: &quot;Wireless Headphones&quot;,
            &quot;images&quot;: [&quot;https://example.com/image1.jpg&quot;]
          },
          &quot;quantity&quot;: 2,
          &quot;price&quot;: 199.99
        }
      ],
      &quot;totalPrice&quot;: 439.97,
      &quot;status&quot;: &quot;Delivered&quot;,
      &quot;isPaid&quot;: true,
      &quot;paidAt&quot;: &quot;2024-01-20T15:30:00.000Z&quot;,
      &quot;isDelivered&quot;: true,
      &quot;deliveredAt&quot;: &quot;2024-01-25T10:00:00.000Z&quot;,
      &quot;createdAt&quot;: &quot;2024-01-20T15:30:00.000Z&quot;
    },
    {
      &quot;_id&quot;: &quot;614c1b5e9f1b2c001f222222&quot;,
      &quot;items&quot;: [
        {
          &quot;product&quot;: {
            &quot;_id&quot;: &quot;614c1b5e9f1b2c001f654322&quot;,
            &quot;name&quot;: &quot;Smart Watch&quot;,
            &quot;images&quot;: [&quot;https://example.com/watch.jpg&quot;]
          },
          &quot;quantity&quot;: 1,
          &quot;price&quot;: 299.99
        }
      ],
      &quot;totalPrice&quot;: 339.99,
      &quot;status&quot;: &quot;Processing&quot;,
      &quot;isPaid&quot;: true,
      &quot;paidAt&quot;: &quot;2024-01-22T09:15:00.000Z&quot;,
      &quot;isDelivered&quot;: false,
      &quot;createdAt&quot;: &quot;2024-01-22T09:15:00.000Z&quot;
    }
  ]
}
</code></pre>
<p><strong>Order Sorting:</strong> Orders are returned in reverse chronological order (newest first)</p>
<hr>
<h3>15. Get Order by ID</h3>
<p><strong>Endpoint:</strong> <code>GET /api/orders/:id</code></p>
<p><strong>Authentication:</strong> Required</p>
<p><strong>Description:</strong> Get detailed information about a specific order</p>
<p><strong>URL Parameters:</strong></p>
<ul>
<li><code>id</code> - Order ID</li>
</ul>
<p><strong>Success Response (200):</strong></p>
<pre><code class="language-json">{
  &quot;success&quot;: true,
  &quot;data&quot;: {
    &quot;_id&quot;: &quot;614c1b5e9f1b2c001f111111&quot;,
    &quot;user&quot;: {
      &quot;_id&quot;: &quot;614c1b5e9f1b2c001f123456&quot;,
      &quot;name&quot;: &quot;John Doe&quot;,
      &quot;email&quot;: &quot;john@example.com&quot;
    },
    &quot;items&quot;: [
      {
        &quot;product&quot;: {
          &quot;_id&quot;: &quot;614c1b5e9f1b2c001f654321&quot;,
          &quot;name&quot;: &quot;Wireless Headphones&quot;,
          &quot;images&quot;: [&quot;https://example.com/image1.jpg&quot;]
        },
        &quot;name&quot;: &quot;Wireless Headphones&quot;,
        &quot;quantity&quot;: 2,
        &quot;price&quot;: 199.99
      }
    ],
    &quot;shippingAddress&quot;: {
      &quot;street&quot;: &quot;123 Main Street&quot;,
      &quot;city&quot;: &quot;New York&quot;,
      &quot;state&quot;: &quot;NY&quot;,
      &quot;zipCode&quot;: &quot;10001&quot;,
      &quot;country&quot;: &quot;USA&quot;
    },
    &quot;paymentMethod&quot;: &quot;stripe&quot;,
    &quot;paymentResult&quot;: {
      &quot;id&quot;: &quot;pi_1234567890&quot;,
      &quot;status&quot;: &quot;succeeded&quot;,
      &quot;update_time&quot;: &quot;2024-01-20T15:30:00.000Z&quot;
    },
    &quot;itemsPrice&quot;: 399.98,
    &quot;taxPrice&quot;: 39.99,
    &quot;shippingPrice&quot;: 0,
    &quot;totalPrice&quot;: 439.97,
    &quot;isPaid&quot;: true,
    &quot;paidAt&quot;: &quot;2024-01-20T15:30:00.000Z&quot;,
    &quot;isDelivered&quot;: true,
    &quot;deliveredAt&quot;: &quot;2024-01-25T10:00:00.000Z&quot;,
    &quot;status&quot;: &quot;Delivered&quot;,
    &quot;createdAt&quot;: &quot;2024-01-20T15:30:00.000Z&quot;,
    &quot;updatedAt&quot;: &quot;2024-01-25T10:00:00.000Z&quot;
  }
}
</code></pre>
<p><strong>Authorization:</strong></p>
<ul>
<li>Users can only view their own orders</li>
<li>Admins can view any order</li>
</ul>
<p><strong>Error Responses:</strong></p>
<ul>
<li><code>403</code> - Not authorized to view this order</li>
<li><code>404</code> - Order not found</li>
<li><code>401</code> - Unauthorized</li>
</ul>
<hr>
<h3>16. Cancel Order</h3>
<p><strong>Endpoint:</strong> <code>PUT /api/orders/:id/cancel</code></p>
<p><strong>Authentication:</strong> Required</p>
<p><strong>Description:</strong> Cancel a pending order (cannot cancel shipped/delivered orders)</p>
<p><strong>URL Parameters:</strong></p>
<ul>
<li><code>id</code> - Order ID to cancel</li>
</ul>
<p><strong>Success Response (200):</strong></p>
<pre><code class="language-json">{
  &quot;success&quot;: true,
  &quot;data&quot;: {
    &quot;_id&quot;: &quot;614c1b5e9f1b2c001f111111&quot;,
    &quot;status&quot;: &quot;Cancelled&quot;,
    &quot;items&quot;: [
      {
        &quot;product&quot;: &quot;614c1b5e9f1b2c001f654321&quot;,
        &quot;quantity&quot;: 2,
        &quot;price&quot;: 199.99
      }
    ],
    &quot;totalPrice&quot;: 439.97
  }
}
</code></pre>
<p><strong>Business Logic:</strong></p>
<ul>
<li>Only orders with status &quot;Pending&quot; or &quot;Processing&quot; can be cancelled</li>
<li>Product stock is restored when order is cancelled</li>
<li>Refund process should be handled separately (not automated)</li>
</ul>
<p><strong>Error Responses:</strong></p>
<ul>
<li><code>400</code> - Cannot cancel shipped or delivered orders</li>
<li><code>403</code> - Not authorized (not order owner)</li>
<li><code>404</code> - Order not found</li>
</ul>
<hr>
<h2>⭐ Product Reviews</h2>
<h3>17. Create Review</h3>
<p><strong>Endpoint:</strong> <code>POST /api/reviews/product/:productId</code></p>
<p><strong>Authentication:</strong> Required</p>
<p><strong>Description:</strong> Create a review for a purchased product</p>
<p><strong>URL Parameters:</strong></p>
<ul>
<li><code>productId</code> - Product ID to review</li>
</ul>
<p><strong>Request Body:</strong></p>
<pre><code class="language-json">{
  &quot;rating&quot;: 5,
  &quot;comment&quot;: &quot;Excellent product! Highly recommended.&quot;
}
</code></pre>
<p><strong>Validation:</strong></p>
<ul>
<li><code>rating</code>: Required, number between 1-5</li>
<li><code>comment</code>: Required, max 500 characters</li>
</ul>
<p><strong>Success Response (201):</strong></p>
<pre><code class="language-json">{
  &quot;success&quot;: true,
  &quot;data&quot;: {
    &quot;_id&quot;: &quot;614c1b5e9f1b2c001f333333&quot;,
    &quot;product&quot;: &quot;614c1b5e9f1b2c001f654321&quot;,
    &quot;user&quot;: {
      &quot;_id&quot;: &quot;614c1b5e9f1b2c001f123456&quot;,
      &quot;name&quot;: &quot;John Doe&quot;
    },
    &quot;rating&quot;: 5,
    &quot;comment&quot;: &quot;Excellent product! Highly recommended.&quot;,
    &quot;createdAt&quot;: &quot;2024-01-26T14:30:00.000Z&quot;,
    &quot;updatedAt&quot;: &quot;2024-01-26T14:30:00.000Z&quot;
  }
}
</code></pre>
<p><strong>Review Requirements:</strong></p>
<ul>
<li>User must have purchased the product (completed paid order)</li>
<li>User can only review each product once</li>
<li>Product rating is automatically updated after review submission</li>
</ul>
<p><strong>Error Responses:</strong></p>
<ul>
<li><code>400</code> - User already reviewed this product</li>
<li><code>403</code> - User hasn&#39;t purchased this product</li>
<li><code>404</code> - Product not found</li>
<li><code>401</code> - Unauthorized</li>
</ul>
<hr>
<h3>18. Get Product Reviews</h3>
<p><strong>Endpoint:</strong> <code>GET /api/reviews/product/:productId</code></p>
<p><strong>Authentication:</strong> Not Required</p>
<p><strong>Description:</strong> Get all reviews for a specific product</p>
<p><strong>URL Parameters:</strong></p>
<ul>
<li><code>productId</code> - Product ID</li>
</ul>
<p><strong>Success Response (200):</strong></p>
<pre><code class="language-json">{
  &quot;success&quot;: true,
  &quot;count&quot;: 15,
  &quot;data&quot;: [
    {
      &quot;_id&quot;: &quot;614c1b5e9f1b2c001f333333&quot;,
      &quot;user&quot;: {
        &quot;_id&quot;: &quot;614c1b5e9f1b2c001f123456&quot;,
        &quot;name&quot;: &quot;John Doe&quot;
      },
      &quot;rating&quot;: 5,
      &quot;comment&quot;: &quot;Excellent product! Highly recommended.&quot;,
      &quot;createdAt&quot;: &quot;2024-01-26T14:30:00.000Z&quot;
    },
    {
      &quot;_id&quot;: &quot;614c1b5e9f1b2c001f444444&quot;,
      &quot;user&quot;: {
        &quot;_id&quot;: &quot;614c1b5e9f1b2c001f123457&quot;,
        &quot;name&quot;: &quot;Jane Smith&quot;
      },
      &quot;rating&quot;: 4,
      &quot;comment&quot;: &quot;Good quality, fast delivery.&quot;,
      &quot;createdAt&quot;: &quot;2024-01-25T10:15:00.000Z&quot;
    }
  ]
}
</code></pre>
<p><strong>Sorting:</strong> Reviews are sorted by creation date (newest first)</p>
<hr>
<h3>19. Update Review</h3>
<p><strong>Endpoint:</strong> <code>PUT /api/reviews/:id</code></p>
<p><strong>Authentication:</strong> Required</p>
<p><strong>Description:</strong> Update user&#39;s own review</p>
<p><strong>URL Parameters:</strong></p>
<ul>
<li><code>id</code> - Review ID</li>
</ul>
<p><strong>Request Body:</strong></p>
<pre><code class="language-json">{
  &quot;rating&quot;: 4,
  &quot;comment&quot;: &quot;Updated: Still good but battery life could be better.&quot;
}
</code></pre>
<p><strong>Success Response (200):</strong></p>
<pre><code class="language-json">{
  &quot;success&quot;: true,
  &quot;data&quot;: {
    &quot;_id&quot;: &quot;614c1b5e9f1b2c001f333333&quot;,
    &quot;user&quot;: {
      &quot;_id&quot;: &quot;614c1b5e9f1b2c001f123456&quot;,
      &quot;name&quot;: &quot;John Doe&quot;
    },
    &quot;rating&quot;: 4,
    &quot;comment&quot;: &quot;Updated: Still good but battery life could be better.&quot;,
    &quot;createdAt&quot;: &quot;2024-01-26T14:30:00.000Z&quot;,
    &quot;updatedAt&quot;: &quot;2024-01-27T09:00:00.000Z&quot;
  }
}
</code></pre>
<p><strong>Authorization:</strong> Users can only update their own reviews</p>
<p><strong>Error Responses:</strong></p>
<ul>
<li><code>403</code> - Not authorized (not review owner)</li>
<li><code>404</code> - Review not found</li>
</ul>
<hr>
<h3>20. Delete Review</h3>
<p><strong>Endpoint:</strong> <code>DELETE /api/reviews/:id</code></p>
<p><strong>Authentication:</strong> Required</p>
<p><strong>Description:</strong> Delete a review (own review or admin)</p>
<p><strong>URL Parameters:</strong></p>
<ul>
<li><code>id</code> - Review ID</li>
</ul>
<p><strong>Success Response (200):</strong></p>
<pre><code class="language-json">{
  &quot;success&quot;: true,
  &quot;message&quot;: &quot;Review deleted&quot;
}
</code></pre>
<p><strong>Authorization:</strong></p>
<ul>
<li>Users can delete their own reviews</li>
<li>Admins can delete any review</li>
</ul>
<p><strong>Business Logic:</strong></p>
<ul>
<li>Product rating is automatically recalculated after deletion</li>
</ul>
<hr>
<h2>👨‍💼 Admin Panel</h2>
<h3>21. Create Product (Admin)</h3>
<p><strong>Endpoint:</strong> <code>POST /api/admin/products</code></p>
<p><strong>Authentication:</strong> Required (Admin Only)</p>
<p><strong>Description:</strong> Create a new product in the catalog</p>
<p><strong>Request Body:</strong></p>
<pre><code class="language-json">{
  &quot;name&quot;: &quot;New Laptop&quot;,
  &quot;description&quot;: &quot;High-performance laptop with 16GB RAM and 512GB SSD&quot;,
  &quot;price&quot;: 1299.99,
  &quot;category&quot;: &quot;Electronics&quot;,
  &quot;stock&quot;: 25,
  &quot;brand&quot;: &quot;TechBrand&quot;,
  &quot;images&quot;: [
    &quot;https://example.com/laptop1.jpg&quot;,
    &quot;https://example.com/laptop2.jpg&quot;
  ],
  &quot;featured&quot;: true
}
</code></pre>
<p><strong>Validation:</strong></p>
<ul>
<li><code>name</code>: Required, 3-100 characters</li>
<li><code>description</code>: Required, 10-2000 characters</li>
<li><code>price</code>: Required, minimum 0</li>
<li><code>category</code>: Required, must be valid enum value</li>
<li><code>stock</code>: Required, minimum 0</li>
</ul>
<p><strong>Success Response (201):</strong></p>
<pre><code class="language-json">{
  &quot;success&quot;: true,
  &quot;data&quot;: {
    &quot;_id&quot;: &quot;614c1b5e9f1b2c001f555555&quot;,
    &quot;name&quot;: &quot;New Laptop&quot;,
    &quot;description&quot;: &quot;High-performance laptop with 16GB RAM and 512GB SSD&quot;,
    &quot;price&quot;: 1299.99,
    &quot;category&quot;: &quot;Electronics&quot;,
    &quot;stock&quot;: 25,
    &quot;brand&quot;: &quot;TechBrand&quot;,
    &quot;images&quot;: [
      &quot;https://example.com/laptop1.jpg&quot;,
      &quot;https://example.com/laptop2.jpg&quot;
    ],
    &quot;featured&quot;: true,
    &quot;rating&quot;: 0,
    &quot;numReviews&quot;: 0,
    &quot;createdAt&quot;: &quot;2024-01-28T10:00:00.000Z&quot;,
    &quot;updatedAt&quot;: &quot;2024-01-28T10:00:00.000Z&quot;
  }
}
</code></pre>
<p><strong>Error Responses:</strong></p>
<ul>
<li><code>400</code> - Validation error</li>
<li><code>403</code> - Access denied (not admin)</li>
<li><code>401</code> - Unauthorized</li>
</ul>
<hr>
<h3>22. Update Product (Admin)</h3>
<p><strong>Endpoint:</strong> <code>PUT /api/admin/products/:id</code></p>
<p><strong>Authentication:</strong> Required (Admin Only)</p>
<p><strong>Description:</strong> Update existing product information</p>
<p><strong>URL Parameters:</strong></p>
<ul>
<li><code>id</code> - Product ID</li>
</ul>
<p><strong>Request Body:</strong> (all fields optional)</p>
<pre><code class="language-json">{
  &quot;name&quot;: &quot;Updated Laptop&quot;,
  &quot;price&quot;: 1199.99,
  &quot;stock&quot;: 30,
  &quot;featured&quot;: false
}
</code></pre>
<p><strong>Success Response (200):</strong></p>
<pre><code class="language-json">{
  &quot;success&quot;: true,
  &quot;data&quot;: {
    &quot;_id&quot;: &quot;614c1b5e9f1b2c001f555555&quot;,
    &quot;name&quot;: &quot;Updated Laptop&quot;,
    &quot;price&quot;: 1199.99,
    &quot;stock&quot;: 30,
    &quot;featured&quot;: false,
    // ... other fields
  }
}
</code></pre>
<hr>
<h3>23. Delete Product (Admin)</h3>
<p><strong>Endpoint:</strong> <code>DELETE /api/admin/products/:id</code></p>
<p><strong>Authentication:</strong> Required (Admin Only)</p>
<p><strong>Description:</strong> Delete a product from the catalog</p>
<p><strong>URL Parameters:</strong></p>
<ul>
<li><code>id</code> - Product ID</li>
</ul>
<p><strong>Success Response (200):</strong></p>
<pre><code class="language-json">{
  &quot;success&quot;: true,
  &quot;message&quot;: &quot;Product deleted&quot;
}
</code></pre>
<p><strong>Warning:</strong> Deleting a product doesn&#39;t affect existing orders containing that product</p>
<hr>
<h3>24. Get All Orders (Admin)</h3>
<p><strong>Endpoint:</strong> <code>GET /api/admin/orders</code></p>
<p><strong>Authentication:</strong> Required (Admin Only)</p>
<p><strong>Description:</strong> Get all orders in the system</p>
<p><strong>Success Response (200):</strong></p>
<pre><code class="language-json">{
  &quot;success&quot;: true,
  &quot;count&quot;: 150,
  &quot;data&quot;: [
    {
      &quot;_id&quot;: &quot;614c1b5e9f1b2c001f111111&quot;,
      &quot;user&quot;: {
        &quot;_id&quot;: &quot;614c1b5e9f1b2c001f123456&quot;,
        &quot;name&quot;: &quot;John Doe&quot;,
        &quot;email&quot;: &quot;john@example.com&quot;
      },
      &quot;items&quot;: [
        {
          &quot;product&quot;: {
            &quot;_id&quot;: &quot;614c1b5e9f1b2c001f654321&quot;,
            &quot;name&quot;: &quot;Wireless Headphones&quot;
          },
          &quot;quantity&quot;: 2,
          &quot;price&quot;: 199.99
        }
      ],
      &quot;totalPrice&quot;: 439.97,
      &quot;status&quot;: &quot;Processing&quot;,
      &quot;isPaid&quot;: true,
      &quot;createdAt&quot;: &quot;2024-01-20T15:30:00.000Z&quot;
    }
    // ... more orders
  ]
}
</code></pre>
<hr>
<h3>25. Update Order Status (Admin)</h3>
<p><strong>Endpoint:</strong> <code>PUT /api/admin/orders/:id</code></p>
<p><strong>Authentication:</strong> Required (Admin Only)</p>
<p><strong>Description:</strong> Update order status (for order fulfillment workflow)</p>
<p><strong>URL Parameters:</strong></p>
<ul>
<li><code>id</code> - Order ID</li>
</ul>
<p><strong>Request Body:</strong></p>
<pre><code class="language-json">{
  &quot;status&quot;: &quot;Shipped&quot;
}
</code></pre>
<p><strong>Valid Status Values:</strong></p>
<ul>
<li><code>Pending</code></li>
<li><code>Processing</code></li>
<li><code>Shipped</code></li>
<li><code>Delivered</code></li>
<li><code>Cancelled</code></li>
</ul>
<p><strong>Success Response (200):</strong></p>
<pre><code class="language-json">{
  &quot;success&quot;: true,
  &quot;data&quot;: {
    &quot;_id&quot;: &quot;614c1b5e9f1b2c001f111111&quot;,
    &quot;status&quot;: &quot;Shipped&quot;,
    &quot;isDelivered&quot;: false,
    // ... other fields
  }
}
</code></pre>
<p><strong>Special Behavior:</strong></p>
<ul>
<li>When status set to &quot;Delivered&quot;:<ul>
<li><code>isDelivered</code> is automatically set to <code>true</code></li>
<li><code>deliveredAt</code> is set to current timestamp</li>
</ul>
</li>
</ul>
<hr>
<h3>26. Get All Users (Admin)</h3>
<p><strong>Endpoint:</strong> <code>GET /api/admin/users</code></p>
<p><strong>Authentication:</strong> Required (Admin Only)</p>
<p><strong>Description:</strong> Get list of all registered users</p>
<p><strong>Success Response (200):</strong></p>
<pre><code class="language-json">{
  &quot;success&quot;: true,
  &quot;count&quot;: 1250,
  &quot;data&quot;: [
    {
      &quot;_id&quot;: &quot;614c1b5e9f1b2c001f123456&quot;,
      &quot;name&quot;: &quot;John Doe&quot;,
      &quot;email&quot;: &quot;john@example.com&quot;,
      &quot;role&quot;: &quot;user&quot;,
      &quot;phone&quot;: &quot;+1234567890&quot;,
      &quot;createdAt&quot;: &quot;2024-01-15T10:30:00.000Z&quot;
    }
    // ... more users
  ]
}
</code></pre>
<p><strong>Note:</strong> Password fields are excluded from response</p>
<hr>
<h3>27. Get Dashboard Stats (Admin)</h3>
<p><strong>Endpoint:</strong> <code>GET /api/admin/dashboard</code></p>
<p><strong>Authentication:</strong> Required (Admin Only)</p>
<p><strong>Description:</strong> Get comprehensive dashboard statistics</p>
<p><strong>Success Response (200):</strong></p>
<pre><code class="language-json">{
  &quot;success&quot;: true,
  &quot;data&quot;: {
    &quot;totalUsers&quot;: 1250,
    &quot;totalProducts&quot;: 450,
    &quot;totalOrders&quot;: 3842,
    &quot;totalRevenue&quot;: 458750.50,
    &quot;recentOrders&quot;: [
      {
        &quot;_id&quot;: &quot;614c1b5e9f1b2c001f111111&quot;,
        &quot;user&quot;: {
          &quot;name&quot;: &quot;John Doe&quot;,
          &quot;email&quot;: &quot;john@example.com&quot;
        },
        &quot;totalPrice&quot;: 439.97,
        &quot;status&quot;: &quot;Processing&quot;,
        &quot;createdAt&quot;: &quot;2024-01-28T15:30:00.000Z&quot;
      }
      // ... 4 more recent orders
    ],
    &quot;lowStockProducts&quot;: [
      {
        &quot;_id&quot;: &quot;614c1b5e9f1b2c001f654321&quot;,
        &quot;name&quot;: &quot;Wireless Headphones&quot;,
        &quot;stock&quot;: 3,
        &quot;price&quot;: 199.99
      }
      // ... up to 10 low stock products
    ]
  }
}
</code></pre>
<p><strong>Dashboard Metrics:</strong></p>
<ul>
<li><code>totalUsers</code> - Count of all registered users</li>
<li><code>totalProducts</code> - Count of all products</li>
<li><code>totalOrders</code> - Count of all orders</li>
<li><code>totalRevenue</code> - Sum of all paid orders</li>
<li><code>recentOrders</code> - Last 5 orders</li>
<li><code>lowStockProducts</code> - Products with stock &lt; 10</li>
</ul>
<hr>
<h2>🔒 Error Handling</h2>
<h3>Standard Error Response Format</h3>
<pre><code class="language-json">{
  &quot;success&quot;: false,
  &quot;message&quot;: &quot;Error description here&quot;
}
</code></pre>
<h3>HTTP Status Codes</h3>
<table>
<thead>
<tr>
<th>Code</th>
<th>Meaning</th>
<th>When Used</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td>Successful GET, PUT, DELETE</td>
</tr>
<tr>
<td>201</td>
<td>Created</td>
<td>Successful POST (resource created)</td>
</tr>
<tr>
<td>400</td>
<td>Bad Request</td>
<td>Validation errors, invalid input</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td>Missing or invalid token</td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td>Valid token but insufficient permissions</td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td>Resource doesn&#39;t exist</td>
</tr>
<tr>
<td>500</td>
<td>Internal Server Error</td>
<td>Server-side errors</td>
</tr>
</tbody></table>
<h3>Common Error Scenarios</h3>
<p><strong>Authentication Errors:</strong></p>
<pre><code class="language-json">// Missing token
{
  &quot;success&quot;: false,
  &quot;message&quot;: &quot;Not authorized to access this route&quot;
}

// Invalid token
{
  &quot;success&quot;: false,
  &quot;message&quot;: &quot;Not authorized, token failed&quot;
}

// Admin access required
{
  &quot;success&quot;: false,
  &quot;message&quot;: &quot;Access denied. Admin only.&quot;
}
</code></pre>
<p><strong>Validation Errors:</strong></p>
<pre><code class="language-json">{
  &quot;success&quot;: false,
  &quot;message&quot;: &quot;\&quot;email\&quot; must be a valid email&quot;
}

{
  &quot;success&quot;: false,
  &quot;message&quot;: &quot;\&quot;password\&quot; length must be at least 6 characters long&quot;
}
</code></pre>
<p><strong>Resource Errors:</strong></p>
<pre><code class="language-json">{
  &quot;success&quot;: false,
  &quot;message&quot;: &quot;Product not found&quot;
}

{
  &quot;success&quot;: false,
  &quot;message&quot;: &quot;Order not found&quot;
}
</code></pre>
<p><strong>Business Logic Errors:</strong></p>
<pre><code class="language-json">{
  &quot;success&quot;: false,
  &quot;message&quot;: &quot;Insufficient stock&quot;
}

{
  &quot;success&quot;: false,
  &quot;message&quot;: &quot;Cart is empty&quot;
}

{
  &quot;success&quot;: false,
  &quot;message&quot;: &quot;Cannot cancel shipped or delivered orders&quot;
}
</code></pre>
<hr>
<h2>🧪 Testing Guide</h2>
<h3>Using Postman</h3>
<h4>1. Setup Environment</h4>
<p>Create a Postman environment with these variables:</p>
<pre><code>BASE_URL: http://localhost:5000/api
TOKEN: (will be set after login)
</code></pre>
<h4>2. Testing Authentication Flow</h4>
<p><strong>Step 1: Register User</strong></p>
<pre><code>POST {{BASE_URL}}/auth/register
Body (JSON):
{
  &quot;name&quot;: &quot;Test User&quot;,
  &quot;email&quot;: &quot;test@example.com&quot;,
  &quot;password&quot;: &quot;password123&quot;
}
</code></pre>
<p><strong>Step 2: Login</strong></p>
<pre><code>POST {{BASE_URL}}/auth/login
Body (JSON):
{
  &quot;email&quot;: &quot;test@example.com&quot;,
  &quot;password&quot;: &quot;password123&quot;
}

// Copy token from response
// Set TOKEN variable in Postman
</code></pre>
<p><strong>Step 3: Access Protected Route</strong></p>
<pre><code>GET {{BASE_URL}}/auth/profile
Headers:
  Authorization: Bearer {{TOKEN}}
</code></pre>
<h4>3. Testing Product Flow</h4>
<pre><code>// Get all products
GET {{BASE_URL}}/products?page=1&amp;limit=10

// Search products
GET {{BASE_URL}}/products?search=wireless&amp;category=Electronics

// Get single product
GET {{BASE_URL}}/products/:productId

// Get featured products
GET {{BASE_URL}}/products/featured
</code></pre>
<h4>4. Testing Shopping Cart</h4>
<pre><code>// Add to cart
POST {{BASE_URL}}/cart
Headers: Authorization: Bearer {{TOKEN}}
Body:
{
  &quot;productId&quot;: &quot;614c1b5e9f1b2c001f654321&quot;,
  &quot;quantity&quot;: 2
}

// Get cart
GET {{BASE_URL}}/cart
Headers: Authorization: Bearer {{TOKEN}}

// Update cart item
PUT {{BASE_URL}}/cart/:productId
Headers: Authorization: Bearer {{TOKEN}}
Body:
{
  &quot;quantity&quot;: 3
}

// Remove from cart
DELETE {{BASE_URL}}/cart/:productId
Headers: Authorization: Bearer {{TOKEN}}
</code></pre>
<h4>5. Testing Order Creation</h4>
<pre><code>POST {{BASE_URL}}/orders
Headers: Authorization: Bearer {{TOKEN}}
Body:
{
  &quot;shippingAddress&quot;: {
    &quot;street&quot;: &quot;123 Test St&quot;,
    &quot;city&quot;: &quot;Test City&quot;,
    &quot;state&quot;: &quot;TC&quot;,
    &quot;zipCode&quot;: &quot;12345&quot;,
    &quot;country&quot;: &quot;USA&quot;
  },
  &quot;paymentMethodId&quot;: &quot;pm_card_visa&quot;
}
</code></pre>
<h3>Testing with cURL</h3>
<p><strong>Register:</strong></p>
<pre><code class="language-bash">curl -X POST http://localhost:5000/api/auth/register \
  -H &quot;Content-Type: application/json&quot; \
  -d &#39;{&quot;name&quot;:&quot;Test User&quot;,&quot;email&quot;:&quot;test@example.com&quot;,&quot;password&quot;:&quot;password123&quot;}&#39;
</code></pre>
<p><strong>Login:</strong></p>
<pre><code class="language-bash">curl -X POST http://localhost:5000/api/auth/login \
  -H &quot;Content-Type: application/json&quot; \
  -d &#39;{&quot;email&quot;:&quot;test@example.com&quot;,&quot;password&quot;:&quot;password123&quot;}&#39;
</code></pre>
<p><strong>Get Profile:</strong></p>
<pre><code class="language-bash">curl -X GET http://localhost:5000/api/auth/profile \
  -H &quot;Authorization: Bearer YOUR_TOKEN_HERE&quot;
</code></pre>
<h3>Automated Testing (Optional)</h3>
<p>Create <code>tests/</code> folder with Jest or Mocha tests:</p>
<pre><code class="language-javascript">// tests/auth.test.js
const request = require(&#39;supertest&#39;);
const app = require(&#39;../server&#39;);

describe(&#39;Auth Endpoints&#39;, () =&gt; {
  it(&#39;should register a new user&#39;, async () =&gt; {
    const res = await request(app)
      .post(&#39;/api/auth/register&#39;)
      .send({
        name: &#39;Test User&#39;,
        email: &#39;test@example.com&#39;,
        password: &#39;password123&#39;
      });
    
    expect(res.statusCode).toBe(201);
    expect(res.body.success).toBe(true);
    expect(res.body.data).toHaveProperty(&#39;token&#39;);
  });
});
</code></pre>
<hr>
<h2>🚀 Deployment</h2>
<h3>Option 1: Deploy to Render</h3>
<p><strong>Step 1: Prepare Repository</strong></p>
<pre><code class="language-bash">git init
git add .
git commit -m &quot;Initial commit&quot;
git remote add origin &lt;your-github-repo&gt;
git push -u origin main
</code></pre>
<p><strong>Step 2: Create Render Account</strong></p>
<ul>
<li>Go to <a href="https://render.com">https://render.com</a></li>
<li>Sign up / Login</li>
<li>Click &quot;New +&quot; → &quot;Web Service&quot;</li>
</ul>
<p><strong>Step 3: Configure Service</strong></p>
<ul>
<li>Connect GitHub repository</li>
<li>Name: <code>ecommerce-api</code></li>
<li>Environment: <code>Node</code></li>
<li>Build Command: <code>npm install</code></li>
<li>Start Command: <code>npm start</code></li>
<li>Instance Type: Free or Starter</li>
</ul>
<p><strong>Step 4: Add Environment Variables</strong></p>
<pre><code>NODE_ENV=production
MONGO_URI=&lt;your-mongodb-atlas-uri&gt;
JWT_SECRET=&lt;your-secret-key&gt;
STRIPE_SECRET_KEY=&lt;your-stripe-key&gt;
</code></pre>
<p><strong>Step 5: Deploy</strong></p>
<ul>
<li>Click &quot;Create Web Service&quot;</li>
<li>Wait for deployment (5-10 minutes)</li>
<li>Your API will be live at <code>https://your-app.onrender.com</code></li>
</ul>
<hr>
<h3>Option 2: Deploy to Heroku</h3>
<pre><code class="language-bash"># Install Heroku CLI
brew install heroku/brew/heroku

# Login
heroku login

# Create app
heroku create ecommerce-api-yourname

# Add MongoDB
heroku addons:create mongolab:sandbox

# Set environment variables
heroku config:set NODE_ENV=production
heroku config:set JWT_SECRET=your_secret_key
heroku config:set STRIPE_SECRET_KEY=your_stripe_key

# Deploy
git push heroku main

# Open app
heroku open
</code></pre>
<hr>
<h3>Option 3: Deploy to Digital Ocean</h3>
<ol>
<li>Create droplet (Ubuntu 22.04)</li>
<li>SSH into server</li>
<li>Install Node.js and MongoDB</li>
<li>Clone repository</li>
<li>Install PM2 process manager</li>
<li>Setup Nginx reverse proxy</li>
<li>Configure SSL with Let&#39;s Encrypt</li>
</ol>
<hr>
<h3>MongoDB Atlas Setup (Cloud Database)</h3>
<p><strong>Step 1: Create Account</strong></p>
<ul>
<li>Go to <a href="https://www.mongodb.com/cloud/atlas">https://www.mongodb.com/cloud/atlas</a></li>
<li>Sign up for free tier</li>
</ul>
<p><strong>Step 2: Create Cluster</strong></p>
<ul>
<li>Choose free M0 tier</li>
<li>Select region closest to your server</li>
<li>Create cluster</li>
</ul>
<p><strong>Step 3: Setup Access</strong></p>
<ul>
<li>Database Access → Add user</li>
<li>Network Access → Add IP (0.0.0.0/0 for all)</li>
</ul>
<p><strong>Step 4: Get Connection String</strong></p>
<ul>
<li>Click &quot;Connect&quot;</li>
<li>Choose &quot;Connect your application&quot;</li>
<li>Copy connection string</li>
<li>Replace <code>&lt;password&gt;</code> with your password</li>
</ul>
<p><strong>Example:</strong></p>
<pre><code>mongodb+srv://username:password@cluster0.xxxxx.mongodb.net/ecommerce?retryWrites=true&amp;w=majority
</code></pre>
<hr>
<h2>📋 Best Practices</h2>
<h3>Security Best Practices</h3>
<ol>
<li><p><strong>Environment Variables</strong></p>
<ul>
<li>Never commit <code>.env</code> file</li>
<li>Use strong JWT secrets (32+ characters)</li>
<li>Rotate secrets periodically</li>
</ul>
</li>
<li><p><strong>Password Security</strong></p>
<ul>
<li>Minimum 6 characters (increase in production)</li>
<li>Hash with bcrypt (12 rounds)</li>
<li>Never log passwords</li>
</ul>
</li>
<li><p><strong>API Security</strong></p>
<ul>
<li>Use HTTPS in production</li>
<li>Implement rate limiting</li>
<li>Validate all inputs</li>
<li>Sanitize user data</li>
</ul>
</li>
<li><p><strong>Token Management</strong></p>
<ul>
<li>Set reasonable expiration (7 days)</li>
<li>Implement token refresh</li>
<li>Store securely on client (httpOnly cookies)</li>
</ul>
</li>
</ol>
<h3>Performance Optimization</h3>
<ol>
<li><p><strong>Database</strong></p>
<ul>
<li>Add indexes on frequently queried fields</li>
<li>Use pagination for large datasets</li>
<li>Implement caching (Redis)</li>
</ul>
</li>
<li><p><strong>API</strong></p>
<ul>
<li>Enable gzip compression</li>
<li>Implement query result caching</li>
<li>Use connection pooling</li>
</ul>
</li>
<li><p><strong>Code</strong></p>
<ul>
<li>Use async/await properly</li>
<li>Avoid N+1 queries</li>
<li>Implement lazy loading</li>
</ul>
</li>
</ol>
<h3>Monitoring &amp; Logging</h3>
<p><strong>Production Logging:</strong></p>
<pre><code class="language-javascript">const winston = require(&#39;winston&#39;);

const logger = winston.createLogger({
  level: &#39;info&#39;,
  format: winston.format.json(),
  transports: [
    new winston.transports.File({ filename: &#39;error.log&#39;, level: &#39;error&#39; }),
    new winston.transports.File({ filename: &#39;combined.log&#39; })
  ]
});
</code></pre>
<p><strong>Health Checks:</strong></p>
<pre><code class="language-javascript">app.get(&#39;/health&#39;, (req, res) =&gt; {
  res.json({
    status: &#39;healthy&#39;,
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    memory: process.memoryUsage()
  });
});
</code></pre>
<hr>
<h2>🔧 Troubleshooting</h2>
<h3>Common Issues</h3>
<p><strong>1. MongoDB Connection Failed</strong></p>
<pre><code>Error: MongoDB connection failed
</code></pre>
<p><strong>Solutions:</strong></p>
<ul>
<li>Check if MongoDB is running: <code>sudo systemctl status mongod</code></li>
<li>Verify MONGO_URI in <code>.env</code></li>
<li>Check network connectivity</li>
<li>Verify MongoDB Atlas IP whitelist</li>
</ul>
<p><strong>2. JWT Token Invalid</strong></p>
<pre><code>Error: Not authorized, token failed
</code></pre>
<p><strong>Solutions:</strong></p>
<ul>
<li>Check JWT_SECRET matches</li>
<li>Verify token format: <code>Bearer &lt;token&gt;</code></li>
<li>Check token expiration</li>
<li>Re-login to get new token</li>
</ul>
<p><strong>3. Stripe Payment Failed</strong></p>
<pre><code>Error: Payment failed
</code></pre>
<p><strong>Solutions:</strong></p>
<ul>
<li>Verify Stripe secret key</li>
<li>Use test cards in development</li>
<li>Check Stripe dashboard for errors</li>
<li>Verify payment amount &gt; 0</li>
</ul>
<p><strong>4. Port Already in Use</strong></p>
<pre><code>Error: EADDRINUSE: address already in use :::5000
</code></pre>
<p><strong>Solutions:</strong></p>
<pre><code class="language-bash"># Find process using port
lsof -i :5000

# Kill process
kill -9 &lt;PID&gt;

# Or use different port
PORT=5001 npm run dev
</code></pre>
<p><strong>5. Module Not Found</strong></p>
<pre><code>Error: Cannot find module &#39;express&#39;
</code></pre>
<p><strong>Solutions:</strong></p>
<pre><code class="language-bash"># Reinstall dependencies
rm -rf node_modules package-lock.json
npm install
</code></pre>
<hr>
<h2>📞 Support &amp; Contact</h2>
<h3>Documentation Resources</h3>
<ul>
<li>Express.js: <a href="https://expressjs.com/">https://expressjs.com/</a></li>
<li>Mongoose: <a href="https://mongoosejs.com/">https://mongoosejs.com/</a></li>
<li>Stripe API: <a href="https://stripe.com/docs/api">https://stripe.com/docs/api</a></li>
<li>JWT: <a href="https://jwt.io/">https://jwt.io/</a></li>
</ul>
<h3>API Status</h3>
<p>Check API health: <code>GET /health</code></p>
<hr>
<h2>📝 Changelog</h2>
<h3>Version 2.0.0 (Current)</h3>
<ul>
<li>✅ Complete authentication system</li>
<li>✅ Shopping cart functionality</li>
<li>✅ Order management</li>
<li>✅ Product reviews</li>
<li>✅ Admin panel</li>
<li>✅ Payment integration</li>
<li>✅ Security enhancements</li>
</ul>
<h3>Future Enhancements</h3>
<ul>
<li>📧 Email notifications</li>
<li>🔄 Password reset</li>
<li>📦 Order tracking with webhooks</li>
<li>🖼️ Image upload</li>
<li>🔍 Advanced search with Elasticsearch</li>
<li>💬 Real-time chat support</li>
<li>📊 Advanced analytics</li>
<li>🌍 Multi-currency support</li>
</ul>
<hr>
<h2>📄 License</h2>
<p>MIT License - Feel free to use for personal and commercial projects</p>
<hr>
<p><strong>End of Documentation</strong></p>
<p>For questions or issues, please create an issue in the repository or contact the development team.</p>

</body>
</html>
